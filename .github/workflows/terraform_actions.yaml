name: "CI/CD centralizado de Terraform"

on:
  workflow_call:
    inputs:
      tf_version:
        description: "Versão do terraform"
        required: false
        type: string
        default: '1.0.0'
      os_version:
        description: "Versão do sistema operacional"
        required: false
        default: "ubuntu-20.04"
        type: string
      use_state_bucket:
        description: "Flag para armazenar estados em um bucket"
        default: false
        type: boolean
        required: false
      bucket_name:
        type: string
      key_tf_state:
        type: string
        default: ${{ github.event.repository.full_name }}
      dynamodb_table:
        type: string
        default: "terraform-lock"
      use_infracost:
        description: "Flag para habilitar a utilização do Infracost"
        default: false
        type: boolean
        required: false
        
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY : ${{ secrets.aws_secret_access_key }}
  WORKING_DIRECTORY: /

jobs:
  jobs_terraform:
    name: "CI/CD centralizado de Terraform"
    runs-on: ${{ inputs.os_version }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform init
        id: init
        if: ${{!inputs.use_state_bucket}}
        run: terraform init

      - name: Terraform init with backend
        id: init_bucket
        if: ${{inputs.use_state_bucket}}
        run: | 
          terraform init \
          -backend-config="bucket=${{ inputs.bucket_name }}" \
          -backend-config="key=${{ inputs.key_tf_state }}.tfstate" \
          -backend-config="dynamodb_table=${{ inputs.dynamodb_table }}"
        
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Validação do tfsec
        id: tfsec
        run: |
          docker run --rm -v $PWD:/app -w /app aquasec/tfsec .

      - name: Terraform plan
        id: plan
        if: github.event_name == 'push'
        run: terraform plan
        continue-on-error: false

      - name: Setup Infracost
        id: setup_infracost
        if: ${{inputs.use_infracost}}
        uses: infracost/actions/setup@v1
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        id: generate_infracost
        if: ${{inputs.use_infracost}}
        run: infracost breakdown --path plan.json --format json --out-file /tmp/infracost.json
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Post Infracost comment
        id: post_infracost
        if: github.event_name == 'pull_request' &&  ${{inputs.use_infracost}}
        run: |
          infracost comment github --path /tmp/infracost.json \
                                   --repo $GITHUB_REPOSITORY \
                                   --github-token ${{github.token}} \
                                   --pull-request ${{github.event.pull_request.number}} \
                                   --behavior update

      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        
